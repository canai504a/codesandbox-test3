/**
 * スプレッド構文　...
 */
// どっとを３つ使う

// 配列の展開
const arr1 = [1, 2];
// console.log(arr1);

// スプレッド構文で中身を確認する方法
// console.log(...arr1);
// 配列　としてのデータを確認していたが、スプレッド構文を扱う事で
// 値だけを出力できた
// とはいっても何の事やらという話で

// もう少し分かりやすい例で
const sumFunc = (num1, num2) => console.log(num1 + num2);
// sumFunc(arr1[0],arr1[1]);
// sumFunc(...arr1);
// 引数の中に、配列の中の要素が順番に入るようになる
// スプレッド構文を使った配列の処理

// まとめる

const arr2 = [1, 2, 3, 4, 5];
// まとめる際は配列の分割代入とセットで使われる事が多い
// myprofileという変数名がarr2になっただけ
// スプレッド構文を使って残りを纏める事が可能
const [num1, num2, ...arr3] = arr2;
// console.log(num1);
// console.log(num2);
// console.log(arr3);
// 配列として残りを表示
// 配列を展開する時や配列をまとめる時に使われる

// 配列のコピー、結合
const arr4 = [10, 20];
const arr5 = [30, 40];
// arr6の中にarr4の値を入れる事が可能
const arr6 = [...arr4];
// console.log(arr6);
// これが配列のコピー

const arr7 = [...arr4, ...arr5];
// console.log(arr7);
// 二つ以上の配列を結合する際に用いられる

// 配列のコピーは配列の名前をイコールで繋げたら良いのでは？となるかもしれないが
const arr8 = arr4;
// console.log(arr8);
// 配列の値に対して何も編集を加えなければ問題ないが、
// 例えばarr8に対して
// arr8[0] = 100;
// 値を変更した場合、元のarr4の値まで変わってしまう
// つまりイコールで配列を繋げた場合は参照先が同じになってしまう
// 不具合の原因になってしまう。
// 詳しくは参照渡し、とかで調べると色々出てくる

arr6[0] = 100;
console.log(arr4);
// 使い方複雑ですが、頑張りましょう
